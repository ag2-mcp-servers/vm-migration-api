# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:07:07+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class AccessKeyCredentials(BaseModel):
    accessKeyId: Optional[str] = Field(None, description='AWS access key ID.')
    secretAccessKey: Optional[str] = Field(
        None, description='Input only. AWS secret access key.'
    )
    sessionToken: Optional[str] = Field(
        None,
        description='Input only. AWS session token. Used only when AWS security token service (STS) is responsible for creating the temporary credentials.',
    )


class AdaptingOSStep(BaseModel):
    pass


class AddGroupMigrationRequest(BaseModel):
    migratingVm: Optional[str] = Field(
        None, description='The full path name of the MigratingVm to add.'
    )


class ApplianceVersion(BaseModel):
    critical: Optional[bool] = Field(
        None,
        description="Determine whether it's critical to upgrade the appliance to this version.",
    )
    releaseNotesUri: Optional[str] = Field(
        None, description='Link to a page that contains the version release notes.'
    )
    uri: Optional[str] = Field(None, description='A link for downloading the version.')
    version: Optional[str] = Field(None, description='The appliance version.')


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    NONE = 'NONE'
    PAYG = 'PAYG'
    BYOL = 'BYOL'


class AppliedLicense(BaseModel):
    osLicense: Optional[str] = Field(
        None, description="The OS license returned from the adaptation module's report."
    )
    type: Optional[Type] = Field(
        None, description='The license type that was used in OS adaptation.'
    )


class AvailableUpdates(BaseModel):
    inPlaceUpdate: Optional[ApplianceVersion] = Field(
        None,
        description='The latest version for in place update. The current appliance can be updated to this version using the API or m4c CLI.',
    )
    newDeployableAppliance: Optional[ApplianceVersion] = Field(
        None,
        description="The newest deployable version of the appliance. The current appliance can't be updated into this version, and the owner must manually deploy this OVA to a new appliance.",
    )


class AwsSecurityGroup(BaseModel):
    id: Optional[str] = Field(None, description='The AWS security group id.')
    name: Optional[str] = Field(None, description='The AWS security group name.')


class State(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'


class Firmware(Enum):
    FIRMWARE_UNSPECIFIED = 'FIRMWARE_UNSPECIFIED'
    EFI = 'EFI'
    BIOS = 'BIOS'


class AwsSourceVmDetails(BaseModel):
    committedStorageBytes: Optional[str] = Field(
        None, description='The total size of the disks being migrated in bytes.'
    )
    firmware: Optional[Firmware] = Field(
        None, description='The firmware type of the source VM.'
    )


class Architecture(Enum):
    VM_ARCHITECTURE_UNSPECIFIED = 'VM_ARCHITECTURE_UNSPECIFIED'
    I386 = 'I386'
    X86_64 = 'X86_64'
    ARM64 = 'ARM64'
    X86_64_MAC = 'X86_64_MAC'


class BootOption(Enum):
    BOOT_OPTION_UNSPECIFIED = 'BOOT_OPTION_UNSPECIFIED'
    EFI = 'EFI'
    BIOS = 'BIOS'


class PowerState(Enum):
    POWER_STATE_UNSPECIFIED = 'POWER_STATE_UNSPECIFIED'
    ON = 'ON'
    OFF = 'OFF'
    SUSPENDED = 'SUSPENDED'
    PENDING = 'PENDING'


class VirtualizationType(Enum):
    VM_VIRTUALIZATION_TYPE_UNSPECIFIED = 'VM_VIRTUALIZATION_TYPE_UNSPECIFIED'
    HVM = 'HVM'
    PARAVIRTUAL = 'PARAVIRTUAL'


class AwsVmDetails(BaseModel):
    architecture: Optional[Architecture] = Field(
        None, description='The CPU architecture.'
    )
    bootOption: Optional[BootOption] = Field(None, description='The VM Boot Option.')
    committedStorageMb: Optional[str] = Field(
        None, description='The total size of the storage allocated to the VM in MB.'
    )
    cpuCount: Optional[int] = Field(None, description='The number of cpus the VM has.')
    diskCount: Optional[int] = Field(
        None, description='The number of disks the VM has.'
    )
    displayName: Optional[str] = Field(
        None,
        description='The display name of the VM. Note that this value is not necessarily unique.',
    )
    instanceType: Optional[str] = Field(
        None, description='The instance type of the VM.'
    )
    memoryMb: Optional[int] = Field(
        None, description='The memory size of the VM in MB.'
    )
    osDescription: Optional[str] = Field(None, description="The VM's OS.")
    powerState: Optional[PowerState] = Field(
        None,
        description='Output only. The power state of the VM at the moment list was taken.',
    )
    securityGroups: Optional[List[AwsSecurityGroup]] = Field(
        None, description='The security groups the VM belongs to.'
    )
    sourceDescription: Optional[str] = Field(
        None,
        description="The descriptive name of the AWS's source this VM is connected to.",
    )
    sourceId: Optional[str] = Field(
        None, description="The id of the AWS's source this VM is connected to."
    )
    tags: Optional[Dict[str, str]] = Field(None, description='The tags of the VM.')
    virtualizationType: Optional[VirtualizationType] = Field(
        None, description='The virtualization type.'
    )
    vmId: Optional[str] = Field(None, description='The VM ID in AWS.')
    vpcId: Optional[str] = Field(None, description='The VPC ID the VM belongs to.')
    zone: Optional[str] = Field(None, description='The AWS zone of the VM.')


class AwsVmsDetails(BaseModel):
    details: Optional[List[AwsVmDetails]] = Field(
        None, description='The details of the AWS VMs.'
    )


class CancelCloneJobRequest(BaseModel):
    pass


class CancelCutoverJobRequest(BaseModel):
    pass


class CancelOperationRequest(BaseModel):
    pass


class State1(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    ACTIVE = 'ACTIVE'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    CANCELLING = 'CANCELLING'
    ADAPTING_OS = 'ADAPTING_OS'


class BootOption1(Enum):
    COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED = 'COMPUTE_ENGINE_BOOT_OPTION_UNSPECIFIED'
    COMPUTE_ENGINE_BOOT_OPTION_EFI = 'COMPUTE_ENGINE_BOOT_OPTION_EFI'
    COMPUTE_ENGINE_BOOT_OPTION_BIOS = 'COMPUTE_ENGINE_BOOT_OPTION_BIOS'


class DiskType(Enum):
    COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED = 'COMPUTE_ENGINE_DISK_TYPE_UNSPECIFIED'
    COMPUTE_ENGINE_DISK_TYPE_STANDARD = 'COMPUTE_ENGINE_DISK_TYPE_STANDARD'
    COMPUTE_ENGINE_DISK_TYPE_SSD = 'COMPUTE_ENGINE_DISK_TYPE_SSD'
    COMPUTE_ENGINE_DISK_TYPE_BALANCED = 'COMPUTE_ENGINE_DISK_TYPE_BALANCED'


class LicenseType(Enum):
    COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT = 'COMPUTE_ENGINE_LICENSE_TYPE_DEFAULT'
    COMPUTE_ENGINE_LICENSE_TYPE_PAYG = 'COMPUTE_ENGINE_LICENSE_TYPE_PAYG'
    COMPUTE_ENGINE_LICENSE_TYPE_BYOL = 'COMPUTE_ENGINE_LICENSE_TYPE_BYOL'


class OnHostMaintenance(Enum):
    ON_HOST_MAINTENANCE_UNSPECIFIED = 'ON_HOST_MAINTENANCE_UNSPECIFIED'
    TERMINATE = 'TERMINATE'
    MIGRATE = 'MIGRATE'


class RestartType(Enum):
    RESTART_TYPE_UNSPECIFIED = 'RESTART_TYPE_UNSPECIFIED'
    AUTOMATIC_RESTART = 'AUTOMATIC_RESTART'
    NO_AUTOMATIC_RESTART = 'NO_AUTOMATIC_RESTART'


class CutoverForecast(BaseModel):
    estimatedCutoverJobDuration: Optional[str] = Field(
        None, description='Output only. Estimation of the CutoverJob duration.'
    )


class State2(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'
    CANCELLED = 'CANCELLED'
    CANCELLING = 'CANCELLING'
    ACTIVE = 'ACTIVE'
    ADAPTING_OS = 'ADAPTING_OS'


class State3(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    OFFLINE = 'OFFLINE'
    FAILED = 'FAILED'
    ACTIVE = 'ACTIVE'


class Empty(BaseModel):
    pass


class FinalizeMigrationRequest(BaseModel):
    pass


class Group(BaseModel):
    createTime: Optional[str] = Field(
        None, description='Output only. The create time timestamp.'
    )
    description: Optional[str] = Field(
        None, description='User-provided description of the group.'
    )
    displayName: Optional[str] = Field(
        None,
        description='Display name is a user defined name for this group which can be updated.',
    )
    name: Optional[str] = Field(None, description='Output only. The Group name.')
    updateTime: Optional[str] = Field(
        None, description='Output only. The update time timestamp.'
    )


class InitializingReplicationStep(BaseModel):
    pass


class InstantiatingMigratedVMStep(BaseModel):
    pass


class Link(BaseModel):
    description: Optional[str] = Field(
        None, description='Describes what the link offers.'
    )
    url: Optional[str] = Field(None, description='The URL of the link.')


class ListGroupsResponse(BaseModel):
    groups: Optional[List[Group]] = Field(
        None, description='Output only. The list of groups response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class LocalizedMessage(BaseModel):
    locale: Optional[str] = Field(
        None,
        description='The locale used following the specification defined at https://www.rfc-editor.org/rfc/bcp/bcp47.txt. Examples are: "en-US", "fr-CH", "es-MX"',
    )
    message: Optional[str] = Field(
        None, description='The localized error message in the above locale.'
    )


class Location(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description='The friendly name for this location, typically a nearby city name. For example, "Tokyo".',
    )
    labels: Optional[Dict[str, str]] = Field(
        None,
        description='Cross-service attributes for the location. For example {"cloud.googleapis.com/region": "us-east1"}',
    )
    locationId: Optional[str] = Field(
        None,
        description='The canonical id for this location. For example: `"us-east1"`.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata. For example the available capacity at the given location.',
    )
    name: Optional[str] = Field(
        None,
        description='Resource name for the location, which may vary between implementations. For example: `"projects/example-project/locations/us-east1"`',
    )


class State4(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    PENDING = 'PENDING'
    READY = 'READY'
    FIRST_SYNC = 'FIRST_SYNC'
    ACTIVE = 'ACTIVE'
    CUTTING_OVER = 'CUTTING_OVER'
    CUTOVER = 'CUTOVER'
    FINAL_SYNC = 'FINAL_SYNC'
    PAUSED = 'PAUSED'
    FINALIZING = 'FINALIZING'
    FINALIZED = 'FINALIZED'
    ERROR = 'ERROR'


class Code(Enum):
    ERROR_CODE_UNSPECIFIED = 'ERROR_CODE_UNSPECIFIED'
    UNKNOWN_ERROR = 'UNKNOWN_ERROR'
    SOURCE_VALIDATION_ERROR = 'SOURCE_VALIDATION_ERROR'
    SOURCE_REPLICATION_ERROR = 'SOURCE_REPLICATION_ERROR'
    TARGET_REPLICATION_ERROR = 'TARGET_REPLICATION_ERROR'
    OS_ADAPTATION_ERROR = 'OS_ADAPTATION_ERROR'
    CLONE_ERROR = 'CLONE_ERROR'
    CUTOVER_ERROR = 'CUTOVER_ERROR'
    UTILIZATION_REPORT_ERROR = 'UTILIZATION_REPORT_ERROR'
    APPLIANCE_UPGRADE_ERROR = 'APPLIANCE_UPGRADE_ERROR'


class MigrationError(BaseModel):
    actionItem: Optional[LocalizedMessage] = Field(
        None, description='Output only. Suggested action for solving the error.'
    )
    code: Optional[Code] = Field(None, description='Output only. The error code.')
    errorMessage: Optional[LocalizedMessage] = Field(
        None, description='Output only. The localized error message.'
    )
    errorTime: Optional[str] = Field(
        None, description='Output only. The time the error occurred.'
    )
    helpLinks: Optional[List[Link]] = Field(
        None,
        description='Output only. URL(s) pointing to additional information on handling the current error.',
    )


class Code1(Enum):
    WARNING_CODE_UNSPECIFIED = 'WARNING_CODE_UNSPECIFIED'
    ADAPTATION_WARNING = 'ADAPTATION_WARNING'


class MigrationWarning(BaseModel):
    actionItem: Optional[LocalizedMessage] = Field(
        None, description='Suggested action for solving the warning.'
    )
    code: Optional[Code1] = Field(None, description='The warning code.')
    helpLinks: Optional[List[Link]] = Field(
        None,
        description='URL(s) pointing to additional information on handling the current warning.',
    )
    warningMessage: Optional[LocalizedMessage] = Field(
        None, description='The localized warning message.'
    )
    warningTime: Optional[str] = Field(
        None, description='The time the warning occurred.'
    )


class NetworkInterface(BaseModel):
    externalIp: Optional[str] = Field(
        None, description='The external IP to define in the NIC.'
    )
    internalIp: Optional[str] = Field(
        None,
        description='The internal IP to define in the NIC. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.',
    )
    network: Optional[str] = Field(
        None, description='The network to connect the NIC to.'
    )
    subnetwork: Optional[str] = Field(
        None, description='The subnetwork to connect the NIC to.'
    )


class OperationMetadata(BaseModel):
    apiVersion: Optional[str] = Field(
        None, description='Output only. API version used to start the operation.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The time the operation was created.'
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the operation finished running.'
    )
    requestedCancellation: Optional[bool] = Field(
        None,
        description='Output only. Identifies whether the user has requested cancellation of the operation. Operations that have successfully been cancelled have Operation.error value with a google.rpc.Status.code of 1, corresponding to `Code.CANCELLED`.',
    )
    statusMessage: Optional[str] = Field(
        None, description='Output only. Human-readable status of the operation, if any.'
    )
    target: Optional[str] = Field(
        None,
        description='Output only. Server-defined resource path for the target of the operation.',
    )
    verb: Optional[str] = Field(
        None, description='Output only. Name of the verb executed by the operation.'
    )


class PauseMigrationRequest(BaseModel):
    pass


class PostProcessingStep(BaseModel):
    pass


class PreparingVMDisksStep(BaseModel):
    pass


class RemoveGroupMigrationRequest(BaseModel):
    migratingVm: Optional[str] = Field(None, description='The MigratingVm to remove.')


class ReplicatingStep(BaseModel):
    lastThirtyMinutesAverageBytesPerSecond: Optional[str] = Field(
        None,
        description='The source disks replication rate for the last 30 minutes in bytes per second.',
    )
    lastTwoMinutesAverageBytesPerSecond: Optional[str] = Field(
        None,
        description='The source disks replication rate for the last 2 minutes in bytes per second.',
    )
    replicatedBytes: Optional[str] = Field(
        None, description='Replicated bytes in the step.'
    )
    totalBytes: Optional[str] = Field(
        None, description='Total bytes to be handled in the step.'
    )


class State5(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    PAUSED = 'PAUSED'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class ReplicationSync(BaseModel):
    lastSyncTime: Optional[str] = Field(
        None,
        description='The most updated snapshot created time in the source that finished replication.',
    )


class ResumeMigrationRequest(BaseModel):
    pass


class SchedulePolicy(BaseModel):
    idleDuration: Optional[str] = Field(
        None, description='The idle duration between replication stages.'
    )
    skipOsAdaptation: Optional[bool] = Field(
        None,
        description="A flag to indicate whether to skip OS adaptation during the replication sync. OS adaptation is a process where the VM's operating system undergoes changes and adaptations to fully function on Compute Engine.",
    )


class Operator(Enum):
    OPERATOR_UNSPECIFIED = 'OPERATOR_UNSPECIFIED'
    IN = 'IN'
    NOT_IN = 'NOT_IN'


class SchedulingNodeAffinity(BaseModel):
    key: Optional[str] = Field(
        None, description='The label key of Node resource to reference.'
    )
    operator: Optional[Operator] = Field(
        None,
        description='The operator to use for the node resources specified in the `values` parameter.',
    )
    values: Optional[List[str]] = Field(
        None, description='Corresponds to the label values of Node resource.'
    )


class ShuttingDownSourceVMStep(BaseModel):
    pass


class StartMigrationRequest(BaseModel):
    pass


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Tag(BaseModel):
    key: Optional[str] = Field(None, description='Key of tag.')
    value: Optional[str] = Field(None, description='Value of tag.')


class TargetProject(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time this target project resource was created (not related to when the Compute Engine project it points to was created).',
    )
    description: Optional[str] = Field(
        None, description="The target project's description."
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the target project.'
    )
    project: Optional[str] = Field(
        None, description='The target project ID (number) or project name.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The last time the target project resource was updated.',
    )


class BootOption3(Enum):
    BOOT_OPTION_UNSPECIFIED = 'BOOT_OPTION_UNSPECIFIED'
    EFI = 'EFI'
    BIOS = 'BIOS'


class DiskType2(Enum):
    DISK_TYPE_UNSPECIFIED = 'DISK_TYPE_UNSPECIFIED'
    STANDARD = 'STANDARD'
    BALANCED = 'BALANCED'
    SSD = 'SSD'


class LicenseType2(Enum):
    DEFAULT = 'DEFAULT'
    PAYG = 'PAYG'
    BYOL = 'BYOL'


class UpgradeApplianceRequest(BaseModel):
    requestId: Optional[str] = Field(
        None,
        description='A request ID to identify requests. Specify a unique request ID so that if you must retry your request, the server will know to ignore the request if it has already been completed. The server will guarantee that for at least 60 minutes after the first request. For example, consider a situation where you make an initial request and the request times out. If you make the request again with the same request ID, the server can check if original operation with the same request ID was received, and if so, will ignore the second request. This prevents clients from accidentally creating duplicate commitments. The request ID must be a valid UUID with the exception that zero UUID is not supported (00000000-0000-0000-0000-000000000000).',
    )


class State6(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    RUNNING = 'RUNNING'
    FAILED = 'FAILED'
    SUCCEEDED = 'SUCCEEDED'


class UpgradeStatus(BaseModel):
    error: Optional[Status] = Field(
        None,
        description='Provides details on the state of the upgrade operation in case of an error.',
    )
    previousVersion: Optional[str] = Field(
        None, description='The version from which we upgraded.'
    )
    startTime: Optional[str] = Field(
        None, description='The time the operation was started.'
    )
    state: Optional[State6] = Field(
        None, description='The state of the upgradeAppliance operation.'
    )
    version: Optional[str] = Field(None, description='The version to upgrade to.')


class State7(Enum):
    STATE_UNSPECIFIED = 'STATE_UNSPECIFIED'
    CREATING = 'CREATING'
    SUCCEEDED = 'SUCCEEDED'
    FAILED = 'FAILED'


class TimeFrame(Enum):
    TIME_FRAME_UNSPECIFIED = 'TIME_FRAME_UNSPECIFIED'
    WEEK = 'WEEK'
    MONTH = 'MONTH'
    YEAR = 'YEAR'


class VmUtilizationMetrics(BaseModel):
    cpuAverage: Optional[int] = Field(None, description='Average CPU usage, percent.')
    cpuAveragePercent: Optional[int] = Field(
        None, description='Average CPU usage, percent.'
    )
    cpuMax: Optional[int] = Field(None, description='Max CPU usage, percent.')
    cpuMaxPercent: Optional[int] = Field(None, description='Max CPU usage, percent.')
    diskIoRateAverage: Optional[str] = Field(
        None, description='Average disk IO rate, in kilobytes per second.'
    )
    diskIoRateAverageKbps: Optional[str] = Field(
        None, description='Average disk IO rate, in kilobytes per second.'
    )
    diskIoRateMax: Optional[str] = Field(
        None, description='Max disk IO rate, in kilobytes per second.'
    )
    diskIoRateMaxKbps: Optional[str] = Field(
        None, description='Max disk IO rate, in kilobytes per second.'
    )
    memoryAverage: Optional[int] = Field(
        None, description='Average memory usage, percent.'
    )
    memoryAveragePercent: Optional[int] = Field(
        None, description='Average memory usage, percent.'
    )
    memoryMax: Optional[int] = Field(None, description='Max memory usage, percent.')
    memoryMaxPercent: Optional[int] = Field(
        None, description='Max memory usage, percent.'
    )
    networkThroughputAverage: Optional[str] = Field(
        None,
        description='Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.',
    )
    networkThroughputAverageKbps: Optional[str] = Field(
        None,
        description='Average network throughput (combined transmit-rates and receive-rates), in kilobytes per second.',
    )
    networkThroughputMax: Optional[str] = Field(
        None,
        description='Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.',
    )
    networkThroughputMaxKbps: Optional[str] = Field(
        None,
        description='Max network throughput (combined transmit-rates and receive-rates), in kilobytes per second.',
    )


class VmwareSourceDetails(BaseModel):
    password: Optional[str] = Field(
        None,
        description='Input only. The credentials password. This is write only and can not be read in a GET operation.',
    )
    thumbprint: Optional[str] = Field(
        None, description='The thumbprint representing the certificate for the vcenter.'
    )
    username: Optional[str] = Field(None, description='The credentials username.')
    vcenterIp: Optional[str] = Field(
        None, description='The ip address of the vcenter this Source represents.'
    )


class PowerState1(Enum):
    POWER_STATE_UNSPECIFIED = 'POWER_STATE_UNSPECIFIED'
    ON = 'ON'
    OFF = 'OFF'
    SUSPENDED = 'SUSPENDED'


class VmwareVmDetails(BaseModel):
    bootOption: Optional[BootOption3] = Field(
        None, description='Output only. The VM Boot Option.'
    )
    committedStorage: Optional[str] = Field(
        None, description='The total size of the storage allocated to the VM in MB.'
    )
    committedStorageMb: Optional[str] = Field(
        None, description='The total size of the storage allocated to the VM in MB.'
    )
    cpuCount: Optional[int] = Field(None, description='The number of cpus in the VM.')
    datacenterDescription: Optional[str] = Field(
        None,
        description="The descriptive name of the vCenter's datacenter this VM is contained in.",
    )
    datacenterId: Optional[str] = Field(
        None, description="The id of the vCenter's datacenter this VM is contained in."
    )
    diskCount: Optional[int] = Field(
        None, description='The number of disks the VM has.'
    )
    displayName: Optional[str] = Field(
        None,
        description='The display name of the VM. Note that this is not necessarily unique.',
    )
    guestDescription: Optional[str] = Field(
        None,
        description="The VM's OS. See for example https://vdc-repo.vmware.com/vmwb-repository/dcr-public/da47f910-60ac-438b-8b9b-6122f4d14524/16b7274a-bf8b-4b4c-a05e-746f2aa93c8c/doc/vim.vm.GuestOsDescriptor.GuestOsIdentifier.html for types of strings this might hold.",
    )
    memoryMb: Optional[int] = Field(
        None, description='The size of the memory of the VM in MB.'
    )
    powerState: Optional[PowerState1] = Field(
        None, description='The power state of the VM at the moment list was taken.'
    )
    uuid: Optional[str] = Field(
        None, description='The unique identifier of the VM in vCenter.'
    )
    vmId: Optional[str] = Field(
        None,
        description="The VM's id in the source (note that this is not the MigratingVm's id). This is the moref id of the VM.",
    )


class VmwareVmsDetails(BaseModel):
    details: Optional[List[VmwareVmDetails]] = Field(
        None, description='The details of the vmware VMs.'
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class View(Enum):
    UTILIZATION_REPORT_VIEW_UNSPECIFIED = 'UTILIZATION_REPORT_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class View2(Enum):
    MIGRATING_VM_VIEW_UNSPECIFIED = 'MIGRATING_VM_VIEW_UNSPECIFIED'
    MIGRATING_VM_VIEW_BASIC = 'MIGRATING_VM_VIEW_BASIC'
    MIGRATING_VM_VIEW_FULL = 'MIGRATING_VM_VIEW_FULL'


class View4(Enum):
    UTILIZATION_REPORT_VIEW_UNSPECIFIED = 'UTILIZATION_REPORT_VIEW_UNSPECIFIED'
    BASIC = 'BASIC'
    FULL = 'FULL'


class AwsSourceDetails(BaseModel):
    accessKeyCreds: Optional[AccessKeyCredentials] = Field(
        None, description='AWS Credentials using access key id and secret.'
    )
    awsRegion: Optional[str] = Field(
        None,
        description='Immutable. The AWS region that the source VMs will be migrated from.',
    )
    error: Optional[Status] = Field(
        None,
        description='Output only. Provides details on the state of the Source in case of an error.',
    )
    inventorySecurityGroupNames: Optional[List[str]] = Field(
        None,
        description='AWS security group names to limit the scope of the source inventory.',
    )
    inventoryTagList: Optional[List[Tag]] = Field(
        None,
        description='AWS resource tags to limit the scope of the source inventory.',
    )
    migrationResourcesUserTags: Optional[Dict[str, str]] = Field(
        None,
        description='User specified tags to add to every M2VM generated resource in AWS. These tags will be set in addition to the default tags that are set as part of the migration process. The tags must not begin with the reserved prefix `m2vm`.',
    )
    publicIp: Optional[str] = Field(
        None,
        description="Output only. The source's public IP. All communication initiated by this source will originate from this IP.",
    )
    state: Optional[State] = Field(
        None,
        description='Output only. State of the source as determined by the health check.',
    )


class CloneStep(BaseModel):
    adaptingOs: Optional[AdaptingOSStep] = Field(None, description='Adapting OS step.')
    endTime: Optional[str] = Field(None, description='The time the step has ended.')
    instantiatingMigratedVm: Optional[InstantiatingMigratedVMStep] = Field(
        None, description='Instantiating migrated VM step.'
    )
    preparingVmDisks: Optional[PreparingVMDisksStep] = Field(
        None, description='Preparing VM disks step.'
    )
    startTime: Optional[str] = Field(None, description='The time the step has started.')


class ComputeScheduling(BaseModel):
    automaticRestart: Optional[bool] = None
    minNodeCpus: Optional[int] = Field(
        None,
        description='The minimum number of virtual CPUs this instance will consume when running on a sole-tenant node. Ignored if no node_affinites are configured.',
    )
    nodeAffinities: Optional[List[SchedulingNodeAffinity]] = Field(
        None,
        description='A set of node affinity and anti-affinity configurations for sole tenant nodes.',
    )
    onHostMaintenance: Optional[OnHostMaintenance] = Field(
        None,
        description='How the instance should behave when the host machine undergoes maintenance that may temporarily impact instance performance.',
    )
    restartType: Optional[RestartType] = Field(
        None,
        description='Whether the Instance should be automatically restarted whenever it is terminated by Compute Engine (not terminated by user). This configuration is identical to `automaticRestart` field in Compute Engine create instance under scheduling. It was changed to an enum (instead of a boolean) to match the default value in Compute Engine which is automatic restart.',
    )


class CycleStep(BaseModel):
    endTime: Optional[str] = Field(
        None, description='The time the cycle step has ended.'
    )
    initializingReplication: Optional[InitializingReplicationStep] = Field(
        None, description='Initializing replication step.'
    )
    postProcessing: Optional[PostProcessingStep] = Field(
        None, description='Post processing step.'
    )
    replicating: Optional[ReplicatingStep] = Field(
        None, description='Replicating step.'
    )
    startTime: Optional[str] = Field(
        None, description='The time the cycle step has started.'
    )


class DatacenterConnector(BaseModel):
    applianceInfrastructureVersion: Optional[str] = Field(
        None,
        description='Output only. Appliance OVA version. This is the OVA which is manually installed by the user and contains the infrastructure for the automatically updatable components on the appliance.',
    )
    applianceSoftwareVersion: Optional[str] = Field(
        None,
        description='Output only. Appliance last installed update bundle version. This is the version of the automatically updatable components on the appliance.',
    )
    availableVersions: Optional[AvailableUpdates] = Field(
        None,
        description='Output only. The available versions for updating this appliance.',
    )
    bucket: Optional[str] = Field(
        None,
        description='Output only. The communication channel between the datacenter connector and Google Cloud.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time the connector was created (as an API call, not when it was actually installed).',
    )
    error: Optional[Status] = Field(
        None,
        description='Output only. Provides details on the state of the Datacenter Connector in case of an error.',
    )
    name: Optional[str] = Field(None, description="Output only. The connector's name.")
    registrationId: Optional[str] = Field(
        None,
        description='Immutable. A unique key for this connector. This key is internal to the OVA connector and is supplied with its creation during the registration process and can not be modified.',
    )
    serviceAccount: Optional[str] = Field(
        None,
        description='The service account to use in the connector when communicating with the cloud.',
    )
    state: Optional[State3] = Field(
        None,
        description='Output only. State of the DatacenterConnector, as determined by the health checks.',
    )
    stateTime: Optional[str] = Field(
        None, description='Output only. The time the state was last set.'
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The last time the connector was updated with an API call.',
    )
    upgradeStatus: Optional[UpgradeStatus] = Field(
        None,
        description='Output only. The status of the current / last upgradeAppliance operation.',
    )
    version: Optional[str] = Field(
        None,
        description='The version running in the DatacenterConnector. This is supplied by the OVA connector during the registration process and can not be modified.',
    )


class FetchInventoryResponse(BaseModel):
    awsVms: Optional[AwsVmsDetails] = Field(
        None, description='The description of the VMs in a Source of type AWS.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The timestamp when the source was last queried (if the result is from the cache).',
    )
    vmwareVms: Optional[VmwareVmsDetails] = Field(
        None, description='The description of the VMs in a Source of type Vmware.'
    )


class ListDatacenterConnectorsResponse(BaseModel):
    datacenterConnectors: Optional[List[DatacenterConnector]] = Field(
        None, description='Output only. The list of sources response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class ListLocationsResponse(BaseModel):
    locations: Optional[List[Location]] = Field(
        None,
        description='A list of locations that matches the specified filter in the request.',
    )
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )


class ListTargetProjectsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    targetProjects: Optional[List[TargetProject]] = Field(
        None, description='Output only. The list of target response.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class Operation(BaseModel):
    done: Optional[bool] = Field(
        None,
        description='If the value is `false`, it means the operation is still in progress. If `true`, the operation is completed, and either `error` or `response` is available.',
    )
    error: Optional[Status] = Field(
        None,
        description='The error result of the operation in case of failure or cancellation.',
    )
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description='Service-specific metadata associated with the operation. It typically contains progress information and common metadata such as create time. Some services might not provide such metadata. Any method that returns a long-running operation should document the metadata type, if any.',
    )
    name: Optional[str] = Field(
        None,
        description='The server-assigned name, which is only unique within the same service that originally returns it. If you use the default HTTP mapping, the `name` should be a resource name ending with `operations/{unique_id}`.',
    )
    response: Optional[Dict[str, Any]] = Field(
        None,
        description='The normal response of the operation in case of success. If the original method returns no data on success, such as `Delete`, the response is `google.protobuf.Empty`. If the original method is standard `Get`/`Create`/`Update`, the response should be the resource. For other methods, the response should have the type `XxxResponse`, where `Xxx` is the original method name. For example, if the original method name is `TakeSnapshot()`, the inferred response type is `TakeSnapshotResponse`.',
    )


class ReplicationCycle(BaseModel):
    cycleNumber: Optional[int] = Field(None, description="The cycle's ordinal number.")
    endTime: Optional[str] = Field(
        None, description='The time the replication cycle has ended.'
    )
    error: Optional[Status] = Field(
        None,
        description='Provides details on the state of the cycle in case of an error.',
    )
    name: Optional[str] = Field(
        None, description='The identifier of the ReplicationCycle.'
    )
    progress: Optional[int] = Field(
        None, description='The current progress in percentage of this cycle.'
    )
    progressPercent: Optional[int] = Field(
        None,
        description="The current progress in percentage of this cycle. Was replaced by 'steps' field, which breaks down the cycle progression more accurately.",
    )
    startTime: Optional[str] = Field(
        None, description='The time the replication cycle has started.'
    )
    state: Optional[State5] = Field(None, description='State of the ReplicationCycle.')
    steps: Optional[List[CycleStep]] = Field(
        None, description="The cycle's steps list representing its progress."
    )
    totalPauseDuration: Optional[str] = Field(
        None, description='The accumulated duration the replication cycle was paused.'
    )
    warnings: Optional[List[MigrationWarning]] = Field(
        None, description='Output only. Warnings that occurred during the cycle.'
    )


class Source(BaseModel):
    aws: Optional[AwsSourceDetails] = Field(
        None, description='AWS type source details.'
    )
    createTime: Optional[str] = Field(
        None, description='Output only. The create time timestamp.'
    )
    description: Optional[str] = Field(
        None, description='User-provided description of the source.'
    )
    error: Optional[Status] = Field(
        None,
        description='Output only. Provides details on the state of the Source in case of an error.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='The labels of the source.'
    )
    name: Optional[str] = Field(None, description='Output only. The Source name.')
    updateTime: Optional[str] = Field(
        None, description='Output only. The update time timestamp.'
    )
    vmware: Optional[VmwareSourceDetails] = Field(
        None, description='Vmware type source details.'
    )


class TargetVMDetails(BaseModel):
    appliedLicense: Optional[AppliedLicense] = Field(
        None,
        description='Output only. The OS license returned from the adaptation module report.',
    )
    bootOption: Optional[BootOption3] = Field(
        None, description='Output only. The VM Boot Option, as set in the source vm.'
    )
    computeScheduling: Optional[ComputeScheduling] = Field(
        None,
        description='Compute instance scheduling information (if empty default is used).',
    )
    diskType: Optional[DiskType2] = Field(
        None, description='The disk type to use in the VM.'
    )
    externalIp: Optional[str] = Field(
        None, description='The external IP to define in the VM.'
    )
    internalIp: Optional[str] = Field(
        None,
        description='The internal IP to define in the VM. The formats accepted are: `ephemeral` \\ ipv4 address \\ a named address resource full path.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='A map of labels to associate with the VM.'
    )
    licenseType: Optional[LicenseType2] = Field(
        None, description='The license type to use in OS adaptation.'
    )
    machineType: Optional[str] = Field(
        None, description='The machine type to create the VM with.'
    )
    machineTypeSeries: Optional[str] = Field(
        None, description='The machine type series to create the VM with.'
    )
    metadata: Optional[Dict[str, str]] = Field(
        None, description='The metadata key/value pairs to assign to the VM.'
    )
    name: Optional[str] = Field(None, description='The name of the VM to create.')
    network: Optional[str] = Field(
        None, description='The network to connect the VM to.'
    )
    networkInterfaces: Optional[List[NetworkInterface]] = Field(
        None, description='List of NICs connected to this VM.'
    )
    networkTags: Optional[List[str]] = Field(
        None, description='A map of network tags to associate with the VM.'
    )
    project: Optional[str] = Field(
        None, description='Output only. The project in which to create the VM.'
    )
    secureBoot: Optional[bool] = Field(
        None,
        description='Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.',
    )
    serviceAccount: Optional[str] = Field(
        None, description='The service account to associate the VM with.'
    )
    subnetwork: Optional[str] = Field(
        None, description='The subnetwork to connect the VM to.'
    )
    targetProject: Optional[str] = Field(
        None,
        description='The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.',
    )
    zone: Optional[str] = Field(None, description='The zone in which to create the VM.')


class VmUtilizationInfo(BaseModel):
    utilization: Optional[VmUtilizationMetrics] = Field(
        None, description='Utilization metrics for this VM.'
    )
    vmId: Optional[str] = Field(None, description="The VM's ID in the source.")
    vmwareVmDetails: Optional[VmwareVmDetails] = Field(
        None, description='The description of the VM in a Source of type Vmware.'
    )


class ComputeEngineTargetDefaults(BaseModel):
    additionalLicenses: Optional[List[str]] = Field(
        None, description='Additional licenses to assign to the VM.'
    )
    appliedLicense: Optional[AppliedLicense] = Field(
        None,
        description='Output only. The OS license returned from the adaptation module report.',
    )
    bootOption: Optional[BootOption1] = Field(
        None, description='Output only. The VM Boot Option, as set in the source vm.'
    )
    computeScheduling: Optional[ComputeScheduling] = Field(
        None,
        description='Compute instance scheduling information (if empty default is used).',
    )
    diskType: Optional[DiskType] = Field(
        None, description='The disk type to use in the VM.'
    )
    hostname: Optional[str] = Field(
        None, description='The hostname to assign to the VM.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='A map of labels to associate with the VM.'
    )
    licenseType: Optional[LicenseType] = Field(
        None, description='The license type to use in OS adaptation.'
    )
    machineType: Optional[str] = Field(
        None, description='The machine type to create the VM with.'
    )
    machineTypeSeries: Optional[str] = Field(
        None, description='The machine type series to create the VM with.'
    )
    metadata: Optional[Dict[str, str]] = Field(
        None, description='The metadata key/value pairs to assign to the VM.'
    )
    networkInterfaces: Optional[List[NetworkInterface]] = Field(
        None, description='List of NICs connected to this VM.'
    )
    networkTags: Optional[List[str]] = Field(
        None, description='A map of network tags to associate with the VM.'
    )
    secureBoot: Optional[bool] = Field(
        None,
        description='Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.',
    )
    serviceAccount: Optional[str] = Field(
        None, description='The service account to associate the VM with.'
    )
    targetProject: Optional[str] = Field(
        None,
        description='The full path of the resource of type TargetProject which represents the Compute Engine project in which to create this VM.',
    )
    vmName: Optional[str] = Field(None, description='The name of the VM to create.')
    zone: Optional[str] = Field(None, description='The zone in which to create the VM.')


class ComputeEngineTargetDetails(BaseModel):
    additionalLicenses: Optional[List[str]] = Field(
        None, description='Additional licenses to assign to the VM.'
    )
    appliedLicense: Optional[AppliedLicense] = Field(
        None, description='The OS license returned from the adaptation module report.'
    )
    bootOption: Optional[BootOption1] = Field(
        None, description='The VM Boot Option, as set in the source vm.'
    )
    computeScheduling: Optional[ComputeScheduling] = Field(
        None,
        description='Compute instance scheduling information (if empty default is used).',
    )
    diskType: Optional[DiskType] = Field(
        None, description='The disk type to use in the VM.'
    )
    hostname: Optional[str] = Field(
        None, description='The hostname to assign to the VM.'
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='A map of labels to associate with the VM.'
    )
    licenseType: Optional[LicenseType] = Field(
        None, description='The license type to use in OS adaptation.'
    )
    machineType: Optional[str] = Field(
        None, description='The machine type to create the VM with.'
    )
    machineTypeSeries: Optional[str] = Field(
        None, description='The machine type series to create the VM with.'
    )
    metadata: Optional[Dict[str, str]] = Field(
        None, description='The metadata key/value pairs to assign to the VM.'
    )
    networkInterfaces: Optional[List[NetworkInterface]] = Field(
        None, description='List of NICs connected to this VM.'
    )
    networkTags: Optional[List[str]] = Field(
        None, description='A map of network tags to associate with the VM.'
    )
    project: Optional[str] = Field(
        None, description='The Google Cloud target project ID or project name.'
    )
    secureBoot: Optional[bool] = Field(
        None,
        description='Defines whether the instance has Secure Boot enabled. This can be set to true only if the vm boot option is EFI.',
    )
    serviceAccount: Optional[str] = Field(
        None, description='The service account to associate the VM with.'
    )
    vmName: Optional[str] = Field(None, description='The name of the VM to create.')
    zone: Optional[str] = Field(None, description='The zone in which to create the VM.')


class CutoverStep(BaseModel):
    endTime: Optional[str] = Field(None, description='The time the step has ended.')
    finalSync: Optional[ReplicationCycle] = Field(None, description='Final sync step.')
    instantiatingMigratedVm: Optional[InstantiatingMigratedVMStep] = Field(
        None, description='Instantiating migrated VM step.'
    )
    preparingVmDisks: Optional[PreparingVMDisksStep] = Field(
        None, description='Preparing VM disks step.'
    )
    previousReplicationCycle: Optional[ReplicationCycle] = Field(
        None, description='A replication cycle prior cutover step.'
    )
    shuttingDownSourceVm: Optional[ShuttingDownSourceVMStep] = Field(
        None, description='Shutting down VM step.'
    )
    startTime: Optional[str] = Field(None, description='The time the step has started.')


class ListOperationsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None, description='The standard List next-page token.'
    )
    operations: Optional[List[Operation]] = Field(
        None,
        description='A list of operations that matches the specified filter in the request.',
    )


class ListReplicationCyclesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    replicationCycles: Optional[List[ReplicationCycle]] = Field(
        None, description='Output only. The list of replication cycles response.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class ListSourcesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    sources: Optional[List[Source]] = Field(
        None, description='Output only. The list of sources response.'
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class UtilizationReport(BaseModel):
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time the report was created (this refers to the time of the request, not the time the report creation completed).',
    )
    displayName: Optional[str] = Field(
        None, description='The report display name, as assigned by the user.'
    )
    error: Optional[Status] = Field(
        None,
        description='Output only. Provides details on the state of the report in case of an error.',
    )
    frameEndTime: Optional[str] = Field(
        None,
        description='Output only. The point in time when the time frame ends. Notice that the time frame is counted backwards. For instance if the "frame_end_time" value is 2021/01/20 and the time frame is WEEK then the report covers the week between 2021/01/20 and 2021/01/14.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The report unique name.'
    )
    state: Optional[State7] = Field(
        None, description='Output only. Current state of the report.'
    )
    stateTime: Optional[str] = Field(
        None, description='Output only. The time the state was last set.'
    )
    timeFrame: Optional[TimeFrame] = Field(
        None, description='Time frame of the report.'
    )
    vmCount: Optional[int] = Field(
        None, description='Output only. Total number of VMs included in the report.'
    )
    vms: Optional[List[VmUtilizationInfo]] = Field(
        None,
        description='List of utilization information per VM. When sent as part of the request, the "vm_id" field is used in order to specify which VMs to include in the report. In that case all other fields are ignored.',
    )
    vmsCount: Optional[int] = Field(
        None, description='Output only. Total number of VMs included in the report.'
    )


class CloneJob(BaseModel):
    computeEngineTargetDetails: Optional[ComputeEngineTargetDetails] = Field(
        None, description='Output only. Details of the target VM in Compute Engine.'
    )
    computeEngineVmDetails: Optional[TargetVMDetails] = Field(
        None,
        description='Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time the clone job was created (as an API call, not when it was actually created in the target).',
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the clone job was ended.'
    )
    error: Optional[Status] = Field(
        None,
        description="Output only. Provides details for the errors that led to the Clone Job's state.",
    )
    name: Optional[str] = Field(None, description='Output only. The name of the clone.')
    state: Optional[State1] = Field(
        None, description='Output only. State of the clone job.'
    )
    stateTime: Optional[str] = Field(
        None, description='Output only. The time the state was last updated.'
    )
    steps: Optional[List[CloneStep]] = Field(
        None, description='Output only. The clone steps list representing its progress.'
    )
    targetDetails: Optional[TargetVMDetails] = Field(
        None,
        description='Output only. Details of the VM to create as the target of this clone job. Deprecated: Use compute_engine_target_details instead.',
    )


class CutoverJob(BaseModel):
    computeEngineTargetDetails: Optional[ComputeEngineTargetDetails] = Field(
        None, description='Output only. Details of the target VM in Compute Engine.'
    )
    computeEngineVmDetails: Optional[TargetVMDetails] = Field(
        None,
        description='Output only. Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_details instead.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time the cutover job was created (as an API call, not when it was actually created in the target).',
    )
    endTime: Optional[str] = Field(
        None, description='Output only. The time the cutover job had finished.'
    )
    error: Optional[Status] = Field(
        None,
        description="Output only. Provides details for the errors that led to the Cutover Job's state.",
    )
    name: Optional[str] = Field(
        None, description='Output only. The name of the cutover job.'
    )
    progress: Optional[int] = Field(
        None,
        description='Output only. The current progress in percentage of the cutover job.',
    )
    progressPercent: Optional[int] = Field(
        None,
        description='Output only. The current progress in percentage of the cutover job.',
    )
    state: Optional[State2] = Field(
        None, description='Output only. State of the cutover job.'
    )
    stateMessage: Optional[str] = Field(
        None,
        description='Output only. A message providing possible extra details about the current state.',
    )
    stateTime: Optional[str] = Field(
        None, description='Output only. The time the state was last updated.'
    )
    steps: Optional[List[CutoverStep]] = Field(
        None,
        description='Output only. The cutover steps list representing its progress.',
    )
    targetDetails: Optional[TargetVMDetails] = Field(
        None,
        description='Output only. Details of the VM to create as the target of this cutover job. Deprecated: Use compute_engine_target_details instead.',
    )


class ListCloneJobsResponse(BaseModel):
    cloneJobs: Optional[List[CloneJob]] = Field(
        None, description='Output only. The list of clone jobs response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class ListCutoverJobsResponse(BaseModel):
    cutoverJobs: Optional[List[CutoverJob]] = Field(
        None, description='Output only. The list of cutover jobs response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )


class ListUtilizationReportsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )
    utilizationReports: Optional[List[UtilizationReport]] = Field(
        None, description='Output only. The list of reports.'
    )


class MigratingVm(BaseModel):
    awsSourceVmDetails: Optional[AwsSourceVmDetails] = Field(
        None, description='Output only. Details of the VM from an AWS source.'
    )
    computeEngineTargetDefaults: Optional[ComputeEngineTargetDefaults] = Field(
        None, description='Details of the target VM in Compute Engine.'
    )
    computeEngineVmDefaults: Optional[TargetVMDetails] = Field(
        None,
        description='Details of the VM in Compute Engine. Deprecated: Use compute_engine_target_defaults instead.',
    )
    createTime: Optional[str] = Field(
        None,
        description='Output only. The time the migrating VM was created (this refers to this resource and not to the time it was installed in the source).',
    )
    currentSyncInfo: Optional[ReplicationCycle] = Field(
        None,
        description='Output only. Details of the current running replication cycle.',
    )
    cutoverForecast: Optional[CutoverForecast] = Field(
        None,
        description='Output only. Provides details of future CutoverJobs of a MigratingVm. Set to empty when cutover forecast is unavailable.',
    )
    description: Optional[str] = Field(
        None, description='The description attached to the migrating VM by the user.'
    )
    displayName: Optional[str] = Field(
        None, description='The display name attached to the MigratingVm by the user.'
    )
    error: Optional[Status] = Field(
        None,
        description='Output only. Provides details on the state of the Migrating VM in case of an error in replication.',
    )
    group: Optional[str] = Field(
        None,
        description='Output only. The group this migrating vm is included in, if any. The group is represented by the full path of the appropriate Group resource.',
    )
    labels: Optional[Dict[str, str]] = Field(
        None, description='The labels of the migrating VM.'
    )
    lastReplicationCycle: Optional[ReplicationCycle] = Field(
        None,
        description='Output only. Details of the last replication cycle. This will be updated whenever a replication cycle is finished and is not to be confused with last_sync which is only updated on successful replication cycles.',
    )
    lastSync: Optional[ReplicationSync] = Field(
        None,
        description='Output only. The most updated snapshot created time in the source that finished replication.',
    )
    name: Optional[str] = Field(
        None, description='Output only. The identifier of the MigratingVm.'
    )
    policy: Optional[SchedulePolicy] = Field(
        None, description='The replication schedule policy.'
    )
    recentCloneJobs: Optional[List[CloneJob]] = Field(
        None,
        description='Output only. The recent clone jobs performed on the migrating VM. This field holds the vm\'s last completed clone job and the vm\'s running clone job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.',
    )
    recentCutoverJobs: Optional[List[CutoverJob]] = Field(
        None,
        description='Output only. The recent cutover jobs performed on the migrating VM. This field holds the vm\'s last completed cutover job and the vm\'s running cutover job, if one exists. Note: To have this field populated you need to explicitly request it via the "view" parameter of the Get/List request.',
    )
    sourceVmId: Optional[str] = Field(
        None,
        description="The unique ID of the VM in the source. The VM's name in vSphere can be changed, so this is not the VM's name but rather its moRef id. This id is of the form vm-.",
    )
    state: Optional[State4] = Field(
        None, description='Output only. State of the MigratingVm.'
    )
    stateTime: Optional[str] = Field(
        None,
        description='Output only. The last time the migrating VM state was updated.',
    )
    targetDefaults: Optional[TargetVMDetails] = Field(
        None,
        description='The default configuration of the target VM that will be created in Google Cloud as a result of the migration. Deprecated: Use compute_engine_target_defaults instead.',
    )
    updateTime: Optional[str] = Field(
        None,
        description='Output only. The last time the migrating VM resource was updated.',
    )


class ListMigratingVmsResponse(BaseModel):
    migratingVms: Optional[List[MigratingVm]] = Field(
        None, description='Output only. The list of Migrating VMs response.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='Output only. A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    unreachable: Optional[List[str]] = Field(
        None, description='Output only. Locations that could not be reached.'
    )
